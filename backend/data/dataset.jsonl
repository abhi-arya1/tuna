{ "input": "Create a graphviz code for a simple family tree with parent, child relationship", "output": "digraph FamilyTree {\n    node [shape=box];\n    Parent [label=\"Parent\"];\n    Child1 [label=\"Child 1\"];\n    Child2 [label=\"Child 2\"];\n    Parent -> Child1;\n    Parent -> Child2;\n}" }
{ "input": "Graphviz code for a state machine with 3 states", "output": "digraph StateMachine {\n    node [shape=circle];\n    State1 [label=\"State 1\"];\n    State2 [label=\"State 2\"];\n    State3 [label=\"State 3\"];\n    State1 -> State2;\n    State2 -> State3;\n    State3 -> State1;\n}" }
{ "input": "Graphviz code for a network diagram with 4 servers and 3 routers", "output": "digraph NetworkDiagram {\n    node [shape=box];\n    Server1 [label=\"Server 1\"];\n    Server2 [label=\"Server 2\"];\n    Server3 [label=\"Server 3\"];\n    Server4 [label=\"Server 4\"];\n    Router1 [label=\"Router 1\", shape=diamond];\n    Router2 [label=\"Router 2\", shape=diamond];\n    Router3 [label=\"Router 3\", shape=diamond];\n    Server1 -> Router1;\n    Server2 -> Router1;\n    Server3 -> Router2;\n    Server4 -> Router2;\n    Router1 -> Router3;\n    Router2 -> Router3;\n}" }
{ "input": "Graphviz code for a flowchart representing a workflow", "output": "digraph Workflow {\n    node [shape=rectangle];\n    Start [label=\"Start\"];\n    Step1 [label=\"Step 1\"];\n    Step2 [label=\"Step 2\"];\n    Step3 [label=\"Step 3\"];\n    End [label=\"End\"];\n    Start -> Step1;\n    Step1 -> Step2;\n    Step2 -> Step3;\n    Step3 -> End;\n}" }
{ "input": "Graphviz code for a simple ER diagram with 2 entities and 1 relationship", "output": "digraph ERDiagram {\n    node [shape=box, style=filled, color=lightblue];\n    Entity1 [label=\"Entity 1\"];\n    Entity2 [label=\"Entity 2\"];\n    Relationship [label=\"Relationship\", shape=ellipse, color=lightgreen];\n    Entity1 -> Relationship;\n    Entity2 -> Relationship;\n}" }
{ "input": "Graphviz code for a diagram representing software architecture with 3 services", "output": "digraph SoftwareArchitecture {\n    node [shape=box, style=filled, color=lightyellow];\n    Service1 [label=\"Service 1\"];\n    Service2 [label=\"Service 2\"];\n    Service3 [label=\"Service 3\"];\n    Service1 -> Service2;\n    Service2 -> Service3;\n    Service3 -> Service1;\n}" }
{ "input": "Graphviz code for a process flow with decision points", "output": "digraph ProcessFlow {\n    node [shape=box];\n    Start [label=\"Start\"];\n    Decision [label=\"Decision\", shape=diamond];\n    Process1 [label=\"Process 1\"];\n    Process2 [label=\"Process 2\"];\n    End [label=\"End\"];\n    Start -> Decision;\n    Decision -> Process1 [label=\"Yes\"];\n    Decision -> Process2 [label=\"No\"];\n    Process1 -> End;\n    Process2 -> End;\n}" }
{ "input": "Graphviz code for a class hierarchy with 3 classes", "output": "digraph ClassHierarchy {\n    node [shape=box, style=filled, color=lightcoral];\n    ClassA [label=\"Class A\"];\n    ClassB [label=\"Class B\"];\n    ClassC [label=\"Class C\"];\n    ClassA -> ClassB;\n    ClassB -> ClassC;\n}" }
{ "input": "Graphviz code for a organization chart with a CEO and 3 departments", "output": "digraph OrganizationChart {\n    node [shape=box, style=filled, color=lightgreen];\n    CEO [label=\"CEO\"];\n    HR [label=\"HR\"];\n    Finance [label=\"Finance\"];\n    IT [label=\"IT\"];\n    CEO -> HR;\n    CEO -> Finance;\n    CEO -> IT;\n}" }
{ "input": "Graphviz code for a simple map with 3 cities and roads between them", "output": "digraph CityMap {\n    node [shape=box];\n    City1 [label=\"City 1\"];\n    City2 [label=\"City 2\"];\n    City3 [label=\"City 3\"];\n    City1 -> City2 [label=\"Road A\"];\n    City2 -> City3 [label=\"Road B\"];\n    City3 -> City1 [label=\"Road C\"];\n}" }
{ "input": "Graphviz code for a tree structure with a root and 3 levels of children", "output": "digraph Tree {\n    node [shape=circle];\n    Root [label=\"Root\"];\n    Level1A [label=\"Level 1A\"];\n    Level1B [label=\"Level 1B\"];\n    Level1C [label=\"Level 1C\"];\n    Level2A [label=\"Level 2A\"];\n    Level2B [label=\"Level 2B\"];\n    Level2C [label=\"Level 2C\"];\n    Level2D [label=\"Level 2D\"];\n    Level3A [label=\"Level 3A\"];\n    Level3B [label=\"Level 3B\"];\n    Root -> Level1A;\n    Root -> Level1B;\n    Root -> Level1C;\n    Level1A -> Level2A;\n    Level1A -> Level2B;\n    Level1B -> Level2C;\n    Level1C -> Level2D;\n    Level2A -> Level3A;\n    Level2B -> Level3B;\n}" }
{ "input": "Graphviz code for a use-case diagram with 1 actor and 2 use cases", "output": "digraph UseCaseDiagram {\n    node [shape=box];\n    Actor [shape=ellipse, label=\"Actor\"];\n    UseCase1 [label=\"Use Case 1\"];\n    UseCase2 [label=\"Use Case 2\"];\n    Actor -> UseCase1;\n    Actor -> UseCase2;\n}" }
{ "input": "Graphviz code for a sequence diagram with 2 participants and 3 messages", "output": "digraph SequenceDiagram {\n    node [shape=box];\n    Participant1 [label=\"Participant 1\"];\n    Participant2 [label=\"Participant 2\"];\n    Participant1 -> Participant2 [label=\"Message 1\"];\n    Participant2 -> Participant1 [label=\"Message 2\"];\n    Participant1 -> Participant2 [label=\"Message 3\"];\n}" }
{ "input": "Graphviz code for a component diagram with 3 components and their interactions", "output": "digraph ComponentDiagram {\n    node [shape=box, style=filled, color=lightblue];\n    Component1 [label=\"Component 1\"];\n    Component2 [label=\"Component 2\"];\n    Component3 [label=\"Component 3\"];\n    Component1 -> Component2;\n    Component2 -> Component3;\n    Component3 -> Component1;\n}" }
{ "input": "Graphviz code for a diagram representing a simple website navigation", "output": "digraph WebsiteNavigation {\n    node [shape=box];\n    Home [label=\"Home\"];\n    About [label=\"About\"];\n    Services [label=\"Services\"];\n    Contact [label=\"Contact\"];\n    Home -> About;\n    Home -> Services;\n    Home -> Contact;\n    About -> Home;\n    Services -> Home;\n    Contact -> Home;\n}" }
{ "input": "Graphviz code for a workflow with start and end points and 3 tasks in between", "output": "digraph Workflow {\n    node [shape=box];\n    Start [label=\"Start\"];\n    Task1 [label=\"Task 1\"];\n    Task2 [label=\"Task 2\"];\n    Task3 [label=\"Task 3\"];\n    End [label=\"End\"];\n    Start -> Task1;\n    Task1 -> Task2;\n    Task2 -> Task3;\n    Task3 -> End;\n}" }
{ "input": "Graphviz code for a simple mind map with 1 root and 3 branches", "output": "digraph MindMap {\n    node [shape=ellipse];\n    Root [label=\"Root\"];\n    Branch1 [label=\"Branch 1\"];\n    Branch2 [label=\"Branch 2\"];\n    Branch3 [label=\"Branch 3\"];\n    Root -> Branch1;\n    Root -> Branch2;\n    Root -> Branch3;\n}" }
{ "input": "Graphviz code for a decision tree with 1 root and 3 branches", "output": "digraph DecisionTree {\n    node [shape=box];\n    Root [label=\"Root\"];\n    Branch1 [label=\"Branch 1\", shape=diamond];\n    Branch2 [label=\"Branch 2\", shape=diamond];\n    Branch3 [label=\"Branch 3\", shape=diamond];\n    Branch1A [label=\"Branch 1A\"];\n    Branch1B [label=\"Branch 1B\"];\n    Branch2A [label=\"Branch 2A\"];\n    Branch2B [label=\"Branch 2B\"];\n    Branch3A [label=\"Branch 3A\"];\n    Root -> Branch1;\n    Root -> Branch2;\n    Root -> Branch3;\n    Branch1 -> Branch1A;\n    Branch1 -> Branch1B;\n    Branch2 -> Branch2A;\n    Branch2 -> Branch2B;\n    Branch3 -> Branch3A;\n}" }
{ "input": "Graphviz code for a organization structure with a manager and team members", "output": "digraph OrgStructure {\n    node [shape=box, style=filled, color=lightgreen];\n    Manager [label=\"Manager\"];\n    TeamMember1 [label=\"Team Member 1\"];\n    TeamMember2 [label=\"Team Member 2\"];\n    TeamMember3 [label=\"Team Member 3\"];\n    Manager -> TeamMember1;\n    Manager -> TeamMember2;\n    Manager -> TeamMember3;\n}" }
{ "input": "Graphviz code for a simple communication network with 4 nodes", "output": "digraph CommunicationNetwork {\n    node [shape=oval];\n    Node1 [label=\"Node 1\"];\n    Node2 [label=\"Node 2\"];\n    Node3 [label=\"Node 3\"];\n    Node4 [label=\"Node 4\"];\n    Node1 -> Node2;\n    Node2 -> Node3;\n    Node3 -> Node4;\n    Node4 -> Node1;\n}" }
{ "input": "Graphviz code for a hierarchical clustering diagram with 5 data points", "output": "digraph HierarchicalClustering {\n    node [shape=circle];\n    Data1 [label=\"Data 1\"];\n    Data2 [label=\"Data 2\"];\n    Data3 [label=\"Data 3\"];\n    Data4 [label=\"Data 4\"];\n    Data5 [label=\"Data 5\"];\n    Cluster1 [label=\"Cluster 1\", shape=rect, style=filled, color=lightblue];\n    Cluster2 [label=\"Cluster 2\", shape=rect, style=filled, color=lightblue];\n    Cluster3 [label=\"Cluster 3\", shape=rect, style=filled, color=lightblue];\n    Data1 -> Cluster1;\n    Data2 -> Cluster1;\n    Data3 -> Cluster2;\n    Data4 -> Cluster2;\n    Data5 -> Cluster3;\n    Cluster1 -> Cluster2;\n    Cluster2 -> Cluster3;\n}" }
{ "input": "Graphviz code for a process flow involving data processing stages", "output": "digraph DataProcessing {\n    node [shape=box];\n    RawData [label=\"Raw Data\"];\n    Preprocessing [label=\"Preprocessing\"];\n    FeatureSelection [label=\"Feature Selection\"];\n    ModelTraining [label=\"Model Training\"];\n    Evaluation [label=\"Evaluation\"];\n    RawData -> Preprocessing;\n    Preprocessing -> FeatureSelection;\n    FeatureSelection -> ModelTraining;\n    ModelTraining -> Evaluation;\n}" }
{ "input": "Graphviz code for a simple data flow diagram with 3 sources and 3 sinks", "output": "digraph DataFlowDiagram {\n    node [shape=box];\n    Source1 [label=\"Source 1\"];\n    Source2 [label=\"Source 2\"];\n    Source3 [label=\"Source 3\"];\n    Sink1 [label=\"Sink 1\"];\n    Sink2 [label=\"Sink 2\"];\n    Sink3 [label=\"Sink 3\"];\n    Source1 -> Sink1;\n    Source2 -> Sink2;\n    Source3 -> Sink3;\n}" }
{ "input": "Graphviz code for a deployment architecture with 2 data centers and load balancer", "output": "digraph DeploymentArch {\n    node [shape=box, style=filled, color=palegreen];\n    DataCenter1 [label=\"Data Center 1\"];\n    DataCenter2 [label=\"Data Center 2\"];\n    LoadBalancer [label=\"Load Balancer\", shape=cylinder];\n    DataCenter1 -> LoadBalancer;\n    DataCenter2 -> LoadBalancer;\n    LoadBalancer -> DataCenter1;\n    LoadBalancer -> DataCenter2;\n}" }
{ "input": "Graphviz code for a dependency graph with 3 modules and 3 dependencies", "output": "digraph DependencyGraph {\n    node [shape=box];\n    Module1 [label=\"Module 1\"];\n    Module2 [label=\"Module 2\"];\n    Module3 [label=\"Module 3\"];\n    Module1 -> Module2;\n    Module2 -> Module3;\n    Module3 -> Module1;\n}" }
{ "input": "Graphviz code for a social network graph with 4 users and connections", "output": "digraph SocialNetwork {\n    node [shape=oval, style=filled, color=lightgrey];\n    User1 [label=\"User 1\"];\n    User2 [label=\"User 2\"];\n    User3 [label=\"User 3\"];\n    User4 [label=\"User 4\"];\n    User1 -> User2;\n    User2 -> User3;\n    User3 -> User4;\n    User4 -> User1;\n}" }
{ "input": "Graphviz code for a software component interaction diagram with 4 components", "output": "digraph ComponentInteraction {\n    node [shape=box, style=filled, color=lightyellow];\n    Component1 [label=\"Component 1\"];\n    Component2 [label=\"Component 2\"];\n    Component3 [label=\"Component 3\"];\n    Component4 [label=\"Component 4\"];\n    Component1 -> Component2;\n    Component2 -> Component3;\n    Component3 -> Component4;\n    Component4 -> Component1;\n}" }
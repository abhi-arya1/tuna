{ "input": "Create a Graphviz code for a simple directed graph with nodes A, B, and C, where A points to B and B points to C.", "output": "digraph G {\n    A -> B;\n    B -> C;\n}" }
{ "input": "How can I create a graph with nodes labeled as 'Start' and 'End' and an arrow from 'Start' to 'End'?", "output": "digraph G {\n    \"Start\" -> \"End\";\n}" }
{ "input": "Generate a Graphviz code for a simple undirected graph with nodes labeled '1', '2', and '3', and edges between each pair of nodes.", "output": "graph G {\n    1 -- 2;\n    1 -- 3;\n    2 -- 3;\n}" }
{ "input": "Create a Graphviz code for a graph with a cycle involving nodes 'Node1', 'Node2', and 'Node3' where each node points to the next.", "output": "digraph G {\n    Node1 -> Node2;\n    Node2 -> Node3;\n    Node3 -> Node1;\n}" }
{ "input": "Generate a Graphviz code for a simple graph with a cluster of nodes {A, B, C} and another node D that points to A.", "output": "digraph G {\n    subgraph cluster_0 {\n        A;\n        B;\n        C;\n        label = \"Cluster\";\n    }\n    D -> A;\n}" }
{ "input": "Create a Graphviz code for a directed acyclic graph (DAG) with nodes 'Root', 'Child1', 'Child2', and 'GrandChild' where 'Root' points to both 'Child1' and 'Child2', and 'Child1' points to 'GrandChild'.", "output": "digraph G {\n    Root -> Child1;\n    Root -> Child2;\n    Child1 -> GrandChild;\n}" }
{ "input": "Generate a Graphviz code for a graph with a hierarchical layout, starting from 'Top' with branches to 'Middle1', 'Middle2', and 'Middle3', and further branching from 'Middle2' to 'Bottom1' and 'Bottom2'.", "output": "digraph G {\n    Top -> Middle1;\n    Top -> Middle2;\n    Top -> Middle3;\n    Middle2 -> Bottom1;\n    Middle2 -> Bottom2;\n}" }
{ "input": "Create a Graphviz code for a graph with nodes labeled as 'Parent' and two children 'ChildA' and 'ChildB' connected with different styled edges.", "output": "digraph G {\n    Parent -> ChildA [style=dashed];\n    Parent -> ChildB [style=dotted];\n}" }
{ "input": "Generate a Graphviz code for a graph with nodes 'Start', 'Process1', 'Process2', and 'End', forming a simple workflow where each node points to the next.", "output": "digraph G {\n    Start -> Process1;\n    Process1 -> Process2;\n    Process2 -> End;\n}" }
{ "input": "Create a Graphviz code for a graph with nodes 'Node0', 'Node1', 'Node2', and 'Node3', where 'Node0' points to 'Node1' and 'Node2', and 'Node1' and 'Node2' both point to 'Node3'.", "output": "digraph G {\n    Node0 -> Node1;\n    Node0 -> Node2;\n    Node1 -> Node3;\n    Node2 -> Node3;\n}" }
{ "input": "Generate a Graphviz code for a graph with two clusters, each containing two nodes, and an edge between the nodes in different clusters.", "output": "digraph G {\n    subgraph cluster_0 { label=\"Cluster 1\"; A; B; }\n    subgraph cluster_1 { label=\"Cluster 2\"; C; D; }\n    A -> C;\n}" }
{ "input": "Create a Graphviz code for a graph with nodes 'First', 'Second', and 'Third', where 'First' points to 'Second' with a bold label 'link', and 'Second' points to 'Third' with a red label 'connect'.", "output": "digraph G {\n    First -> Second [label=\"link\", fontweight=bold];\n    Second -> Third [label=\"connect\", color=red];\n}" }
{ "input": "Generate a Graphviz code for a graph with nodes 'Alpha', 'Beta', 'Gamma', and 'Delta', forming a two-level tree with 'Alpha' as the root, 'Beta' and 'Gamma' as children of 'Alpha', and 'Delta' as a child of 'Beta'.", "output": "digraph G {\n    Alpha -> Beta;\n    Alpha -> Gamma;\n    Beta -> Delta;\n}" }
{ "input": "Create a Graphviz code for a graph with nodes 'A', 'B', 'C', and 'D', where 'A' points to 'B' and 'C', and 'B' and 'C' both point to 'D', with 'B' and 'C' having different colors.", "output": "digraph G {\n    A -> B [color=blue];\n    A -> C [color=green];\n    B -> D;\n    C -> D;\n}" }
{ "input": "Generate a Graphviz code for a graph representing a state machine with states 'State1', 'State2', 'State3', 'State4', and 'State5', where transitions exist from 'State1' to 'State2', 'State2' to 'State3', 'State3' to 'State4', 'State4' to 'State5', and 'State5' back to 'State1'.", "output": "digraph G {\n    State1 -> State2;\n    State2 -> State3;\n    State3 -> State4;\n    State4 -> State5;\n    State5 -> State1;\n}" }
{ "input": "Create a Graphviz code for a graph with nodes 'One', 'Two', and 'Three', where 'One' points to 'Two' and 'Three', and 'Two' and 'Three' point back to 'One', forming a cycle.", "output": "digraph G {\n    One -> Two;\n    One -> Three;\n    Two -> One;\n    Three -> One;\n}" }
{ "input": "Generate a Graphviz code for a graph with nodes labeled as 'X', 'Y', 'Z', and 'W', forming a grid structure where 'X' connects to 'Y' and 'Z', 'Y' connects to 'W', and 'Z' connects to 'W'.", "output": "graph G {\n    X -- Y;\n    X -- Z;\n    Y -- W;\n    Z -- W;\n}" }
{ "input": "Create a Graphviz code for a graph with nodes 'NodeX', 'NodeY', 'NodeZ', and 'NodeW', where 'NodeX' points to 'NodeY', 'NodeY' points to 'NodeW', and 'NodeX' points directly to 'NodeZ' and 'NodeW'.", "output": "digraph G {\n    NodeX -> NodeY;\n    NodeY -> NodeW;\n    NodeX -> NodeZ;\n    NodeX -> NodeW;\n}" }
{ "input": "Generate a Graphviz code for a graph with nodes 'A', 'B', and 'C' forming a simple triangle, where each node points to the next.", "output": "digraph G {\n    A -> B;\n    B -> C;\n    C -> A;\n}" }
{ "input": "Create a Graphviz code for a graph with nodes 'Client', 'Server', 'Database', and 'API', where 'Client' points to 'Server', 'Server' points to 'API', and 'API' points to 'Database'.", "output": "digraph G {\n    Client -> Server;\n    Server -> API;\n    API -> Database;\n}" }
{ "input": "Generate a Graphviz code for a graph with nodes 'Start', 'Process', 'Decision', and 'End', where 'Start' points to 'Process', 'Process' points to 'Decision', and 'Decision' has edges to both 'End' and 'Process'.", "output": "digraph G {\n    Start -> Process;\n    Process -> Decision;\n    Decision -> End;\n    Decision -> Process;\n}" }
{ "input": "Create a Graphviz code for a graph with nodes 'Node1', 'Node2', 'Node3', 'Node4', and 'Node5', forming a diamond structure where 'Node1' points to 'Node2' and 'Node3', 'Node2' and 'Node3' both point to 'Node4', and 'Node4' points to 'Node5'.", "output": "digraph G {\n    Node1 -> Node2;\n    Node1 -> Node3;\n    Node2 -> Node4;\n    Node3 -> Node4;\n    Node4 -> Node5;\n}" }
{ "input": "Generate a Graphviz code for a graph with nodes 'A', 'B', 'C', 'D', 'E', and 'F', where 'A' points to 'B' and 'C', 'B' points to 'D', 'C' points to 'D', 'D' points to 'E' and 'F', and 'E' and 'F' point to 'G'.", "output": "digraph G {\n    A -> B;\n    A -> C;\n    B -> D;\n    C -> D;\n    D -> E;\n    D -> F;\n    E -> G;\n    F -> G;\n}" }
{ "input": "Create a Graphviz code for a graph with nodes 'Start', 'Process1', 'Decision1', 'Process2', and 'End', where 'Start' points to 'Process1', 'Process1' points to 'Decision1', 'Decision1' branches to 'Process2' and 'End', and 'Process2' points to 'End'.", "output": "digraph G {\n    Start -> Process1;\n    Process1 -> Decision1;\n    Decision1 -> Process2;\n    Decision1 -> End;\n    Process2 -> End;\n}" }
{ "input": "Generate a Graphviz code for a graph with nodes 'Node1', 'Node2', 'Node3', 'Node4', 'Node5', and 'Node6', forming a more complex structure with 'Node1' pointing to 'Node2' and 'Node3', 'Node2' pointing to 'Node4', 'Node3' pointing to 'Node5', 'Node4' and 'Node5' both pointing to 'Node6'.", "output": "digraph G {\n    Node1 -> Node2;\n    Node1 -> Node3;\n    Node2 -> Node4;\n    Node3 -> Node5;\n    Node4 -> Node6;\n    Node5 -> Node6;\n}" }
{ "input": "Create a Graphviz code for a graph with nodes labeled as 'Input', 'ProcessA', 'Decision', 'ProcessB', 'Output', and 'Error', where 'Input' points to 'ProcessA', 'ProcessA' points to 'Decision', 'Decision' branches to 'ProcessB', 'ProcessB' points to 'Output', and 'Decision' also points directly to 'Error'.", "output": "digraph G {\n    Input -> ProcessA;\n    ProcessA -> Decision;\n    Decision -> ProcessB;\n    ProcessB -> Output;\n    Decision -> Error;\n}" }
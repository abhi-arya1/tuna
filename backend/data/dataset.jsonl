{ "input": "Create a simple directed graph with nodes A, B, and C where A points to B and B points to C", "output": "digraph G {\n    A -> B;\n    B -> C;\n}" }
{ "input": "Generate a flowchart for a decision process with two branches: Yes and No, starting from a Start node", "output": "digraph Flowchart {\n    Start [shape=diamond];\n    Yes [shape=box];\n    No [shape=box];\n    End [shape=ellipse];\n\n    Start -> Yes [label=\"Yes\"];\n    Start -> No [label=\"No\"];\n    Yes -> End;\n    No -> End;\n}" }
{ "input": "Draw a cluster graph with two subclusters, each containing a couple of nodes", "output": "digraph G {\n    subgraph cluster_0 {\n        label=\"Subcluster 0\";\n        a1;\n        a2;\n    }\n\n    subgraph cluster_1 {\n        label=\"Subcluster 1\";\n        b1;\n        b2;\n    }\n\n    a1 -> b1;\n    a2 -> b2;\n}" }
{ "input": "Create a state machine with states S0, S1, and S2, and transitions from S0 to S1, S1 to S2, and S2 to S0", "output": "digraph StateMachine {\n    S0 [shape=circle];\n    S1 [shape=circle];\n    S2 [shape=circle];\n\n    S0 -> S1;\n    S1 -> S2;\n    S2 -> S0;\n}" }
{ "input": "Design a hierarchical organization chart with a CEO at the top, and two levels of managers and staff below", "output": "digraph OrganizationChart {\n    CEO [label=\"CEO\", shape=box];\n    Manager1 [label=\"Manager 1\", shape=box];\n    Manager2 [label=\"Manager 2\", shape=box];\n    Staff1 [label=\"Staff 1\", shape=box];\n    Staff2 [label=\"Staff 2\", shape=box];\n    Staff3 [label=\"Staff 3\", shape=box];\n    Staff4 [label=\"Staff 4\", shape=box];\n\n    CEO -> Manager1;\n    CEO -> Manager2;\n    Manager1 -> Staff1;\n    Manager1 -> Staff2;\n    Manager2 -> Staff3;\n    Manager2 -> Staff4;\n}" }
{ "input": "Make a graph with nodes named Node1, Node2, Node3, and Node4 forming a square", "output": "graph Square {\n    Node1 -- Node2;\n    Node2 -- Node3;\n    Node3 -- Node4;\n    Node4 -- Node1;\n}" }
{ "input": "Create a simple tree with a root node and three levels of children", "output": "digraph Tree {\n    root [shape=ellipse];\n    child1 [shape=box];\n    child2 [shape=box];\n    child3 [shape=box];\n    grandchild1 [shape=ellipse];\n    grandchild2 [shape=ellipse];\n    grandchild3 [shape=ellipse];\n    grandchild4 [shape=ellipse];\n    grandchild5 [shape=ellipse];\n    grandchild6 [shape=ellipse];\n\n    root -> child1;\n    root -> child2;\n    root -> child3;\n    child1 -> grandchild1;\n    child1 -> grandchild2;\n    child2 -> grandchild3;\n    child2 -> grandchild4;\n    child3 -> grandchild5;\n    child3 -> grandchild6;\n}" }
{ "input": "Generate a graph with two disconnected subgraphs: one with nodes X, Y, and Z and another with nodes P, Q, and R", "output": "graph Disconnected {\n    subgraph cluster_0 {\n        X -- Y;\n        Y -- Z;\n    }\n    subgraph cluster_1 {\n        P -- Q;\n        Q -- R;\n    }\n}" }
{ "input": "Design a network diagram with routers and computers connected in a mesh topology", "output": "graph Network {\n    node [shape=circle];\n    Router1;\n    Router2;\n    Router3;\n    Router4;\n    Computer1;\n    Computer2;\n    Computer3;\n\n    Router1 -- Router2;\n    Router1 -- Router3;\n    Router1 -- Router4;\n    Router2 -- Router3;\n    Router2 -- Router4;\n    Router3 -- Router4;\n    Computer1 -- Router1;\n    Computer2 -- Router2;\n    Computer3 -- Router3;\n}" }
{ "input": "Create a graph with nodes labeled as Circle, Square, and Triangle, connected in a triangle shape", "output": "graph Triangle {\n    Circle [shape=circle];\n    Square [shape=box];\n    Triangle [shape=triangle];\n\n    Circle -- Square;\n    Square -- Triangle;\n    Triangle -- Circle;\n}" }
{ "input": "Generate a graph showing a simple class hierarchy with three classes: Animal, Dog, and Cat, where Dog and Cat inherit from Animal", "output": "digraph ClassHierarchy {\n    node [shape=box];\n    Animal;\n    Dog;\n    Cat;\n\n    Animal -> Dog;\n    Animal -> Cat;\n}" }
{ "input": "Make a flowchart for a login system with nodes for Start, User Input, Check Credentials, Allow Access, and Deny Access", "output": "digraph LoginSystem {\n    node [shape=diamond];\n    Start [label=\"Start\"];\n    CheckCredentials [label=\"Check Credentials\"];\n    node [shape=box];\n    UserInput [label=\"User Input\"];\n    AllowAccess [label=\"Allow Access\"];\n    DenyAccess [label=\"Deny Access\"];\n\n    Start -> UserInput;\n    UserInput -> CheckCredentials;\n    CheckCredentials -> AllowAccess [label=\"Valid\"];\n    CheckCredentials -> DenyAccess [label=\"Invalid\"];\n}" }
{ "input": "Design a graph representing a project timeline with tasks Task1, Task2, Task3, and Task4 where Task2 and Task3 depend on Task1 and Task4 depends on both Task2 and Task3", "output": "digraph ProjectTimeline {\n    Task1;\n    Task2;\n    Task3;\n    Task4;\n\n    Task1 -> Task2;\n    Task1 -> Task3;\n    Task2 -> Task4;\n    Task3 -> Task4;\n}" }
{ "input": "Create a graph with nodes labeled 1, 2, 3, 4, and 5, arranged in a five-pointed star shape", "output": "graph Star {\n    1 -- 2;\n    2 -- 3;\n    3 -- 4;\n    4 -- 5;\n    5 -- 1;\n}" }
{ "input": "Generate a graph with nodes representing databases and tables in a database system where there are relationships between tables", "output": "digraph Database {\n    node [shape=box];\n    database1 [label=\"Database 1\"];\n    db1_table1 [label=\"Table 1\"];\n    db1_table2 [label=\"Table 2\"];\n    database2 [label=\"Database 2\"];\n    db2_table1 [label=\"Table 1\"];\n    db2_table2 [label=\"Table 2\"];\n\n    database1 -> db1_table1;\n    database1 -> db1_table2;\n    database2 -> db2_table1;\n    database2 -> db2_table2;\n    db1_table1 -> db2_table1;\n    db1_table2 -> db2_table2;\n}" }
{ "input": "Draw a graph with nodes representing geographical locations connected by roads, forming a map-like structure", "output": "graph Map {\n    node [shape=box];\n    NewYork [label=\"New York\"];\n    Boston [label=\"Boston\"];\n    Philadelphia [label=\"Philadelphia\"];\n    Washington [label=\"Washington\"];\n\n    NewYork -- Boston;\n    NewYork -- Philadelphia;\n    Boston -- Philadelphia;\n    Boston -- Washington;\n    Philadelphia -- Washington;\n}" }
{ "input": "Create a graph showing the steps in a cooking recipe with nodes for each step and directed edges to represent the flow", "output": "digraph Recipe {\n    Start [shape=diamond];\n    HeatOven [shape=box];\n    MixIngredients [shape=box];\n    PourMixture [shape=box];\n    Bake [shape=box];\n    Serve [shape=box];\n\n    Start -> HeatOven;\n    HeatOven -> MixIngredients;\n    MixIngredients -> PourMixture;\n    PourMixture -> Bake;\n    Bake -> Serve;\n}" }
{ "input": "Design a graph with nodes representing different stages of software development lifecycle from Requirements to Deployment", "output": "digraph SDLC {\n    Requirements [shape=ellipse];\n    Design [shape=box];\n    Implementation [shape=box];\n    Testing [shape=box];\n    Deployment [shape=box];\n    Maintenance [shape=box];\n\n    Requirements -> Design;\n    Design -> Implementation;\n    Implementation -> Testing;\n    Testing -> Deployment;\n    Deployment -> Maintenance;\n}" }
{ "input": "Generate a bipartite graph with two sets of nodes, each containing three nodes, and edges connecting nodes from one set to the other", "output": "graph Bipartite {\n    node [shape=circle];\n    a1;\n    a2;\n    a3;\n    node [shape=square];\n    b1;\n    b2;\n    b3;\n\n    a1 -- b1;\n    a1 -- b2;\n    a2 -- b1;\n    a2 -- b3;\n    a3 -- b2;\n    a3 -- b3;\n}" }
{ "input": "Create a graph with nodes representing different departments in a company and edges showing collaboration between departments", "output": "graph Company {\n    node [shape=ellipse];\n    HR [label=\"Human Resources\"];\n    IT [label=\"Information Technology\"];\n    Finance [label=\"Finance\"];\n    Sales [label=\"Sales\"];\n    Marketing [label=\"Marketing\"];\n\n    HR -- IT;\n    IT -- Finance;\n    Finance -- Sales;\n    Sales -- Marketing;\n    Marketing -- HR;\n}" }
{ "input": "Design a graph representing the relationships between characters in a story with parent-child and sibling relationships", "output": "digraph Story {\n    node [shape=circle];\n    Parent;\n    Child1;\n    Child2;\n    Sibling1;\n    Sibling2;\n\n    Parent -> Child1;\n    Parent -> Child2;\n    Child1 -> Sibling1 [label=\"Sibling\"];\n    Child1 -> Sibling2 [label=\"Sibling\"];\n    Child2 -> Sibling1 [label=\"Sibling\"];\n    Child2 -> Sibling2 [label=\"Sibling\"];\n}" }
{ "input": "Create a graph with nodes representing steps in a machine learning pipeline with edges showing the data flow", "output": "digraph MLpipeline {\n    node [shape=ellipse];\n    DataCollection;\n    Preprocessing;\n    ModelTraining;\n    ModelEvaluation;\n    Deployment;\n\n    DataCollection -> Preprocessing;\n    Preprocessing -> ModelTraining;\n    ModelTraining -> ModelEvaluation;\n    ModelEvaluation -> Deployment;\n}" }
{ "input": "Generate a graph with nodes representing courses in a curriculum and edges showing prerequisites between courses", "output": "digraph Curriculum {\n    node [shape=ellipse];\n    Math101;\n    Math102;\n    CompSci101;\n    CompSci102;\n    Math201;\n    CompSci201;\n\n    Math101 -> Math102;\n    Math102 -> Math201;\n    CompSci101 -> CompSci102;\n    Math102 -> CompSci201;\n    CompSci102 -> CompSci201;\n}" }
{ "input": "Create a graph with nodes representing different stages of a project risk management process", "output": "digraph RiskManagement {\n    node [shape=ellipse];\n    Identify;\n    Analyze;\n    PlanStrategies;\n    MonitorControl;\n    Communicate;\n    Review;\n\n    Identify -> Analyze;\n    Analyze -> PlanStrategies;\n    PlanStrategies -> MonitorControl;\n    MonitorControl -> Communicate;\n    Communicate -> Review;\n    Review -> Identify [label=\"Iterate\"];\n}" }
{ "input": "Design a graph with nodes representing different states in a traffic light system and edges showing transitions between states", "output": "digraph TrafficLight {\n    Red [label=\"Red\", shape=ellipse];\n    Yellow [label=\"Yellow\", shape=ellipse];\n    Green [label=\"Green\", shape=ellipse];\n\n    Red -> Green;\n    Green -> Yellow;\n    Yellow -> Red;\n}" }
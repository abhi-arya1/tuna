{ "input": "Create a simple flowchart for a decision process", "output": "digraph G {\n    node [shape=box];\n    Start -> Process1;\n    Process1 -> Decision [label=\"Yes\"];\n    Process1 -> End [label=\"No\"];\n    Decision -> Process2 [label=\"Option 1\"];\n    Decision -> Process3 [label=\"Option 2\"];\n    Process2 -> End;\n    Process3 -> End;\n}" }
{ "input": "Graph a simple tree structure", "output": "digraph T {\n    root -> a;\n    root -> b;\n    root -> c;\n    a -> a1;\n    a -> a2;\n    b -> b1;\n    b -> b2;\n}" }
{ "input": "Visualize a network of three interconnected systems", "output": "digraph Network {\n    System1 -> System2;\n    System2 -> System3;\n    System3 -> System1;\n}" }
{ "input": "Create a state machine with 3 states", "output": "digraph StateMachine {\n    node [shape=circle];\n    A -> B [label=\"Start\"];\n    B -> C [label=\"Process\"];\n    C -> A [label=\"Restart\"];\n}" }
{ "input": "Design a class hierarchy with three classes", "output": "digraph ClassHierarchy {\n    node [shape=record];\n    ClassA [label=\"{ClassA|+method1()|+method2()}\"];\n    ClassB [label=\"{ClassB|+method1()}\"];\n    ClassC [label=\"{ClassC|+method2()}\" ];\n    ClassA -> ClassB;\n    ClassA -> ClassC;\n}" }
{ "input": "Graph a social network of 4 interconnected users", "output": "digraph SocialNetwork {\n    node [shape=circle];\n    User1 -> User2;\n    User1 -> User3;\n    User2 -> User4;\n    User3 -> User4;\n}" }
{ "input": "Create a Gantt chart for a small project", "output": "digraph Gantt {\n    node [shape=box];\n    Task1 [label=\"Task 1\"];\n    Task2 [label=\"Task 2\"];\n    Task3 [label=\"Task 3\"];\n    Task1 -> Task2 [label=\"Depends\"];\n    Task2 -> Task3 [label=\"Depends\"];\n}" }
{ "input": "Graph a decision tree with three levels", "output": "digraph DecisionTree {\n    node [shape=box];\n    A -> B;\n    A -> C;\n    B -> D;\n    B -> E;\n    C -> F;\n    C -> G;\n}" }
{ "input": "Visualize a binary search tree with 5 nodes", "output": "digraph BST {\n    node [shape=circle];\n    5 -> 3;\n    5 -> 8;\n    3 -> 2;\n    3 -> 4;\n    8 -> 7;\n    8 -> 9;\n}" }
{ "input": "Create a UML diagram for a simple system", "output": "digraph UML {\n    node [shape=record];\n    System [label=\"{System|+method1()|+method2()}\"];\n    DB [label=\"{Database|+store()|+retrieve()}\"];\n    UI [label=\"{UserInterface|+display()|+update()}\"];\n    System -> DB;\n    System -> UI;\n}" }
{ "input": "Graph a small web server request flow", "output": "digraph WebServer {\n    node [shape=box];\n    Client -> Server [label=\"Request\"];\n    Server -> Client [label=\"Response\"];\n    Server -> Database [label=\"Query Data\"];\n    Database -> Server [label=\"Data\"];\n}" }
{ "input": "Create a simple organizational chart", "output": "digraph OrgChart {\n    node [shape=box];\n    CEO -> Manager1;\n    CEO -> Manager2;\n    Manager1 -> Employee1;\n    Manager1 -> Employee2;\n    Manager2 -> Employee3;\n    Manager2 -> Employee4;\n}" }
{ "input": "Graph a process flow for an order processing system", "output": "digraph OrderProcess {\n    node [shape=box];\n    ReceiveOrder -> ValidateOrder;\n    ValidateOrder -> ProcessPayment;\n    ProcessPayment -> FulfillOrder;\n    FulfillOrder -> ShipOrder;\n    ShipOrder -> Complete;\n}" }
{ "input": "Create a diagram for a basic computer architecture", "output": "digraph ComputerArch {\n    node [shape=box];\n    CPU -> RAM [label=\"Access\"];\n    CPU -> Storage [label=\"Store/Retrieve\"];\n    CPU -> GPU [label=\"Process Graphics\"];\n    GPU -> Display [label=\"Render\"];\n    RAM -> GPUs [label=\"Share Data\"];\n}" }
{ "input": "Graph a simple workflow for a customer support system", "output": "digraph SupportWorkflow {\n    node [shape=box];\n    NewTicket -> AssignToAgent;\n    AssignToAgent -> Escalate [label=\"Cannot Resolve\"];\n    AssignToAgent -> CloseTicket [label=\"Resolved\"];\n    Escalate -> TechnicalSupport;\n    TechnicalSupport -> CloseTicket;\n}" }
{ "input": "Create a diagram for a biological pathway", "output": "digraph BioPathway {\n    node [shape=ellipse];\n    Enzyme1 -> Intermediate1;\n    Intermediate1 -> Enzyme2;\n    Enzyme2 -> Product;\n    Enzyme1 [color=blue];\n    Enzyme2 [color=blue];\n    Product [color=green];\n}" }
{ "input": "Graph a project timeline with four milestones", "output": "digraph ProjectTimeline {\n    node [shape=box];\n    Start -> Milestone1 [label=\"Start\"];\n    Milestone1 -> Milestone2 [label=\"Complete\"];\n    Milestone2 -> Milestone3 [label=\"Complete\"];\n    Milestone3 -> Milestone4 [label=\"Complete\"];\n    Milestone4 -> Finish [label=\"Complete\"];\n}" }
{ "input": "Create a diagram for a simple circuit", "output": "digraph Circuit {\n    node [shape=circle];\n    Power -> Resistor;\n    Resistor -> Capacitor;\n    Capacitor -> Ground;\n    Power -> Switch;\n    Switch -> Inductor;\n    Inductor -> Ground;\n}" }
{ "input": "Graph a small-scale supply chain", "output": "digraph SupplyChain {\n    node [shape=box];\n    Manufacturer -> Distributor;\n    Distributor -> Retailer;\n    Retailer -> Consumer;\n    Manufacturer [color=orange];\n    Distributor [color=orange];\n    Retailer [color=orange];\n    Consumer [color=green];\n}" }
{ "input": "Create a diagram for a basic blockchain", "output": "digraph Blockchain {\n    node [shape=record];\n    Block1 [label=\"{<h>Block 1|<d>Hash: 1234|Data: Transaction A|Prev Hash: 0000}\"];\n    Block2 [label=\"{<h>Block 2|<d>Hash: 2345|Data: Transaction B|Prev Hash: 1234}\"];\n    Block3 [label=\"{<h>Block 3|<d>Hash: 3456|Data: Transaction C|Prev Hash: 2345}\"];\n    Block1 -> Block2;\n    Block2 -> Block3;\n}" }
{ "input": "Graph a small town's public transportation routes", "output": "digraph TransportRoutes {\n    node [shape=box];\n    BusStation1 -> BusStation2;\n    BusStation2 -> BusStation3;\n    BusStation3 -> BusStation4;\n    BusStation4 -> BusStation1;\n    BusStation1 -> TrainStation1;\n    TrainStation1 -> TrainStation2;\n    TrainStation2 -> TrainStation3;\n    TrainStation3 -> TrainStation1;\n}" }
{ "input": "Create a logical circuit diagram for an AND gate", "output": "digraph ANDGate {\n    node [shape=circle];\n    Input1 -> AND [label=\"In1\"];\n    Input2 -> AND [label=\"In2\"];\n    AND -> Output [label=\"Out\"];\n}" }
{ "input": "Graph a food delivery service workflow", "output": "digraph FoodDelivery {\n    node [shape=box];\n    Customer -> Restaurant [label=\"Order\"];\n    Restaurant -> DeliveryDriver [label=\"Prepare\"];\n    DeliveryDriver -> Customer [label=\"Deliver\"];\n}" }